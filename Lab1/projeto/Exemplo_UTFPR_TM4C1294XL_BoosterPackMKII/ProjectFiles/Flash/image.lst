


ARM Macro Assembler    Page 1 


    1 00000000                 THUMB
    2 00000000         
    3 00000000                 AREA             |.text|, READONLY, CODE, ALIGN=
2
    4 00000000         
    5 00000000         
    6 00000000                 IMPORT           IMAGE_WIDTH
    7 00000000                 IMPORT           IMAGE_HEIGHT
    8 00000000                 IMPORT           DISPLAY_WIDTH
    9 00000000                 IMPORT           DISPLAY_HEIGHT
   10 00000000                 IMPORT           images
   11 00000000                 IMPORT           image       ; The current image
                                                             being displayed
   12 00000000                 IMPORT           current_image ; Index of the cu
                                                            rrent image being d
                                                            isplayed
   13 00000000                 IMPORT           current_state
   14 00000000         
   15 00000000                 EXPORT           resizeImage
   16 00000000         
   17 00000000         
   18 00000000         ; Function to resize the current image acording to the i
                       mage state
   19 00000000         ;
   20 00000000         ; Possible states:
   21 00000000         ;  0     1     2    3    4   5  6  7  8   9  10
   22 00000000         ; 1/32  1/16  1/8  1/4  1/2  1  2  4  8  16  32
   23 00000000         ;
   24 00000000         ; This function will take the bytes of the image in memo
                       ry and copy
   25 00000000         ; them to another region with the ratio based on the sta
                       tes
   26 00000000         ;
   27 00000000         ; Algorithm:
   28 00000000         ;
   29 00000000         ; If expanding:
   30 00000000         ;  For each row in the base image:
   31 00000000         ;  For each column in the row:
   32 00000000         ;   Get byte from base image
   33 00000000         ;   Copy the byte in the target image in img[base_row:ba
                       se_row+k][base_col:base_col+k]
   35 00000000         ;               /\       /\          /\       / ;      
                                ||       ||          ||    ||
   36 00000000         ;              Will need 2 FORs inside (row + column)
   37 00000000         ;   These will get a slot and transform in k^2:       |
   38 00000000         ;   k = 2 ->  *  ->   * *           |
   39 00000000         ;         * *           |
   40 00000000         ;                    |
   41 00000000         ; Else (if shrinking):               |
   42 00000000         ; For each row in the base image:            |
   43 00000000         ;  For each column in the row:            |
   44 00000000         ;   Get byte from base image           |
   45 00000000         ;   For each copied row: <------------------------------
                       -------------/
   46 00000000         ;    For each copied column:
   47 00000000         ;     Copy the byte
   48 00000000         ;     Add k to column iterator 
   49 00000000         ;   Add k to row iterator
   50 00000000         ;



ARM Macro Assembler    Page 2 


   51 00000000         ; Registers:
   52 00000000         ; * These will be kept constant
   53 00000000         ; R4 - Address from base image
   54 00000000         ; R5 - Address from target image
   55 00000000         ;
   56 00000000         ; Will leave R0 free to do calculations and store values
                       
   57 00000000         ; for later insertion in memory
   58 00000000         ;
   59 00000000         ; The rest of the registers will be used for intermediar
                       y calculations
   60 00000000         ;
   61 00000000         ; Memory structure:
   62 00000000         ; Some values are there for convenience
   63 00000000         ; If it works
   64 00000000         ; @TODO: optimize memory - alocate registers for iterato
                       rs and often accessed values
   65 00000000         ;  and remove them from stack
   66 00000000         ;
   67 00000000         ;  -----------------  <- Previous stack pointer
   68 00000000         ; |       SP        |
   69 00000000         ; |-----------------|
   70 00000000         ; |     Padding     |
   71 00000000         ; |-----------------| <- Current stack pointer
   72 00000000         ; |  Base img addr  | -0x04
   73 00000000         ; | Target img addr | -0x08
   74 00000000         ; |  Row max  | -0x09
   75 00000000         ; |   Column max    | -0x0A
   76 00000000         ; |  Resize factor  | -0x0B
   77 00000000         ; | Reduction flag  | -0x0C
   78 00000000         ; |   Row iterator  | -0x0D
   79 00000000         ; | Column iterator | -0x0E
   80 00000000         ; | Row copy itera  | -0x0F
   81 00000000         ; | Col copy itera  | -0x10
   82 00000000         ; |     .        |
   83 00000000         ; |     .        |
   84 00000000         ; |      .        |
   85 00000000         ;
   86 00000000         ; All information will be stored and accessed as BYTES
   87 00000000         ;
   88 00000000         ;
   89 00000000         resizeImage
   90 00000000 B500            PUSH{LR}
   91 00000002         
   92 00000002         ; Creating new stack frame
   93 00000002 4668            MOV              R0, SP
   94 00000004 B401            PUSH{R0}
   95 00000006 F020 000F       AND              R0, #0xFFFFFFF0 
                                                            ; Padding memory
   96 0000000A F1A0 0020       SUB              R0, #0x20   ; Creating frame of
                                                             32 Bytes (extra in
                                                             case needed)
   97 0000000E 4685            MOV              SP, R0      ; Updating stack po
                                                            inter
   98 00000010         
   99 00000010         ; Getting images addresses
  100 00000010 4962            LDR              R1, =images ; Loading base imag
                                                            es array address
  101 00000012 4863            LDR              R0, =current_image ; Loading ad



ARM Macro Assembler    Page 3 


                                                            dress of index from
                                                             current image in i
                                                            mages array
  102 00000014 7800            LDRB             R0, [R0]    ; Loading index fro
                                                            m current image
  103 00000016 4401            ADD              R1, R1, R0  ; Calculating addre
                                                            ss for base image a
                                                            ddress
  104 00000018 680C            LDR              R4, [R1]    ; Loading base imag
                                                            e address
  105 0000001A         
  106 0000001A F84D 4C04       STR              R4, [SP, #-0x04] ; Storing base
                                                             image address
  107 0000001E         
  108 0000001E 4A61            LDR              R2, =image  ; Loading address t
                                                            hat will be filled 
                                                            with the image
  109 00000020 F102 0502       ADD              R5, R2, #2  ; Adding offset fro
                                                            m 2 bytes (uint8_t 
                                                            width, height)
  110 00000024         
  111 00000024 F84D 5C08       STR              R5, [SP, #-0x08] ; Storing targ
                                                            et image address
  112 00000028         
  113 00000028         
  114 00000028         ; Gets resize factor and shrinking flag
  115 00000028 485F            LDR              R0, =current_state
  116 0000002A 7800            LDRB             R0, [R0]
  117 0000002C F04F 0100       MOV              R1, #0
  118 00000030 4288            CMP              R0, R1
  119 00000032 BF04            ITT              EQ
  120 00000034 2220            MOVEQ            R2, #32     ; Resize factor is 
                                                            32
  121 00000036 2301            MOVEQ            R3, #01     ; Image is shrinkin
                                                            g
  122 00000038         
  123 00000038 F04F 0101       MOV              R1, #1
  124 0000003C 4288            CMP              R0, R1
  125 0000003E BF04            ITT              EQ
  126 00000040 2210            MOVEQ            R2, #16     ; Resize factor is 
                                                            16
  127 00000042 2301            MOVEQ            R3, #01     ; Image is shrinkin
                                                            g
  128 00000044         
  129 00000044 F04F 0102       MOV              R1, #2
  130 00000048 4288            CMP              R0, R1
  131 0000004A BF04            ITT              EQ
  132 0000004C 2208            MOVEQ            R2, #08     ; Resize factor is 
                                                            08
  133 0000004E 2301            MOVEQ            R3, #01     ; Image is shrinkin
                                                            g
  134 00000050         
  135 00000050 F04F 0103       MOV              R1, #3
  136 00000054 4288            CMP              R0, R1
  137 00000056 BF04            ITT              EQ
  138 00000058 2204            MOVEQ            R2, #04     ; Resize factor is 
                                                            04
  139 0000005A 2301            MOVEQ            R3, #01     ; Image is shrinkin
                                                            g



ARM Macro Assembler    Page 4 


  140 0000005C         
  141 0000005C F04F 0104       MOV              R1, #4
  142 00000060 4288            CMP              R0, R1
  143 00000062 BF04            ITT              EQ
  144 00000064 2202            MOVEQ            R2, #02     ; Resize factor is 
                                                            02
  145 00000066 2301            MOVEQ            R3, #01     ; Image is shrinkin
                                                            g
  146 00000068         
  147 00000068 F04F 0105       MOV              R1, #5
  148 0000006C 4288            CMP              R0, R1
  149 0000006E BF04            ITT              EQ
  150 00000070 2201            MOVEQ            R2, #01     ; Resize factor is 
                                                            01
  151 00000072 2300            MOVEQ            R3, #00     ; Image is "expandi
                                                            ng" (1B will be cop
                                                            ied)
  152 00000074         
  153 00000074         
  154 00000074 F04F 0106       MOV              R1, #6
  155 00000078 4288            CMP              R0, R1
  156 0000007A BF04            ITT              EQ
  157 0000007C 2202            MOVEQ            R2, #02     ; Resize factor is 
                                                            02
  158 0000007E 2300            MOVEQ            R3, #00     ; Image is expandin
                                                            g
  159 00000080         
  160 00000080 F04F 0107       MOV              R1, #7
  161 00000084 4288            CMP              R0, R1
  162 00000086 BF04            ITT              EQ
  163 00000088 2204            MOVEQ            R2, #04     ; Resize factor is 
                                                            04
  164 0000008A 2300            MOVEQ            R3, #00     ; Image is expandin
                                                            g
  165 0000008C         
  166 0000008C F04F 0108       MOV              R1, #8
  167 00000090 4288            CMP              R0, R1
  168 00000092 BF04            ITT              EQ
  169 00000094 2208            MOVEQ            R2, #08     ; Resize factor is 
                                                            08
  170 00000096 2300            MOVEQ            R3, #00     ; Image is expandin
                                                            g
  171 00000098         
  172 00000098 F04F 0109       MOV              R1, #9
  173 0000009C 4288            CMP              R0, R1
  174 0000009E BF04            ITT              EQ
  175 000000A0 2210            MOVEQ            R2, #16     ; Resize factor is 
                                                            16
  176 000000A2 2300            MOVEQ            R3, #00     ; Image is expandin
                                                            g
  177 000000A4         
  178 000000A4 F04F 010A       MOV              R1, #10
  179 000000A8 4288            CMP              R0, R1
  180 000000AA BF04            ITT              EQ
  181 000000AC 2220            MOVEQ            R2, #32     ; Resize factor is 
                                                            32
  182 000000AE 2300            MOVEQ            R3, #00     ; Image is expandin
                                                            g
  183 000000B0         



ARM Macro Assembler    Page 5 


  184 000000B0 F80D 2C0B       STRB             R2, [SP, #-0x0B] ; Storing resi
                                                            ze factor
  185 000000B4 F80D 3C0C       STRB             R3, [SP, #-0x0C] ; Storing shri
                                                            nking flag
  186 000000B8         
  187 000000B8         
  188 000000B8 493A            LDR              R1, =image
  189 000000BA 7808            LDRB             R0, [R1]    ; Loading height (o
                                                            ffset 0 inside stru
                                                            ct - row max)
  190 000000BC F80D 0C09       STRB             R0, [SP, #-0x09] 
                                                            ; Storing max rows
  191 000000C0         
  192 000000C0 4938            LDR              R1, =image
  193 000000C2 7848            LDRB             R0, [R1, #1] ; Loading width (c
                                                            olumn max)
  194 000000C4 F80D 0C0A       STRB             R0, [SP, #-0x0A] ; Storing max 
                                                            columns
  195 000000C8         
  196 000000C8         ; Initializing iterators in memory
  197 000000C8 F04F 0000       MOV              R0, #0      ; Initializing as 0
                                                            
  198 000000CC F80D 0C0D       STRB             R0, [SP, #-0x0D] ; Initializing
                                                             row iterator
  199 000000D0 F80D 0C0E       STRB             R0, [SP, #-0x0E] ; Initializing
                                                             col iterator
  200 000000D4 F80D 0C0F       STRB             R0, [SP, #-0x0F] ; Initializing
                                                             row copy iterator
  201 000000D8 F80D 0C10       STRB             R0, [SP, #-0x10] ; Initializing
                                                             col copy iterator
  202 000000DC         
  203 000000DC         ForRow
  204 000000DC         ; Must be done for when branching from code inside this 
                       for
  205 000000DC F81D 0C0D       LDRB             R0, [SP, #-0x0D] ; Loading row 
                                                            iterator
  206 000000E0 F81D 1C09       LDRB             R1, [SP, #-0x09] 
                                                            ; Loading max rows
  207 000000E4 4288            CMP              R0, R1      ; If finished with 
                                                            rows
  208 000000E6 DA53            BGE              EEnd        ; Return
  209 000000E8         
  210 000000E8         ForColumn
  211 000000E8 F81D 0C0E       LDRB             R0, [SP, #-0x0E] ; Loading colu
                                                            mn iterator
  212 000000EC F81D 1C0A       LDRB             R1, [SP, #-0x0A] ; Loading max 
                                                            columns
  213 000000F0 4288            CMP              R0, R1      ; If finished with 
                                                            columns
  214 000000F2 DB06            BLT              ForColumnCont
  215 000000F4         ForColumnEnd
  216 000000F4 F81D 0C0D       LDRB             R0, [SP, #-0x0D] ; Loading row 
                                                            iterator
  217 000000F8 F100 0001       ADD              R0, R0, #1  ; Incrementing
  218 000000FC F80D 0C0D       STRB             R0, [SP, #-0x0D] ; Storing back
                                                            
  219 00000100 E7EC            B                ForRow      ; Go to next row
  220 00000102         ForColumnCont
  221 00000102 F81D 0C0C       LDRB             R0, [SP, #-0x0C] ; Loading redu



ARM Macro Assembler    Page 6 


                                                            ction flag
  222 00000106 2801            CMP              R0, #1      ; Checks if is redu
                                                            cing the size
  223 00000108 D03F            BEQ              SkipBytes
  224 0000010A         
  225 0000010A F04F 0000       MOV              R0, #0      ; Initializing row 
                                                            copy iterator
  226 0000010E F80D 0C0F       STRB             R0, [SP, #-0xF] ; Must be done 
                                                            every time it enter
                                                            s this scope
  227 00000112         
  228 00000112         ; Starting new copy cycle
  229 00000112         CopyForRow
  230 00000112 F81D 0C0F       LDRB             R0, [SP, #-0x0F] ; Loading row 
                                                            copy iterator
  231 00000116 F81D 1C0B       LDRB             R1, [SP, #-0x0B] ; Loading resi
                                                            ze factor
  232 0000011A 4288            CMP              R0, R1      ; If finished with 
                                                            copying the rows
  233 0000011C DB06            BLT              CopyForRowCont
  234 0000011E         
  235 0000011E         CopyForRowEnd
  236 0000011E F81D 0C0E       LDRB             R0, [SP, #-0x0E] ; Loading colu
                                                            mn iterator
  237 00000122 F100 0001       ADD              R0, #1      ; Incrementing it
  238 00000126 F80D 0C0E       STRB             R0, [SP, #-0x0E] ; Storing back
                                                            
  239 0000012A E7DD            B                ForColumn   ; Continuing with o
                                                            uter column loop
  240 0000012C         
  241 0000012C         CopyForRowCont
  242 0000012C F04F 0000       MOV              R0, #0      ; Initializing colu
                                                            mn copy iterator
  243 00000130 F80D 0C10       STRB             R0, [SP, #-0x10] ; Storing to b
                                                            e accesses inside c
                                                            opy column label
  244 00000134         
  245 00000134         ; Copying row of bytes
  246 00000134         CopyForColumn
  247 00000134 F81D 0C10       LDRB             R0, [SP, #-0x10] ; Loading colu
                                                            mn copy iterator
  248 00000138 F81D 1C0B       LDRB             R1, [SP, #-0x0B] ; Loading resi
                                                            ze factor
  249 0000013C         
  250 0000013C 4288            CMP              R0, R1      ; If finished copyi
                                                            ng columns
  251 0000013E DB06            BLT              CopyForColumnCont
  252 00000140         
  253 00000140         CopyForColumnEnd
  254 00000140 F81D 0C0F       LDRB             R0, [SP, #-0x0F] ; Loading row 
                                                            copy iterator
  255 00000144 F100 0001       ADD              R0, #1      ; Incrementing it
  256 00000148 F80D 0C0F       STRB             R0, [SP, #-0x0F] ; Storing back
                                                            
  257 0000014C E7E1            B                CopyForRow  ; Continuing with n
                                                            ext row
  258 0000014E         
  259 0000014E         CopyForColumnCont
  260 0000014E         ; Computing address in target image for byte



ARM Macro Assembler    Page 7 


  261 0000014E F85D 2C0F       LDR              R2, [SP, #-0x0F] ; Loading row 
                                                            copy iterator
  262 00000152 4603            MOV              R3, R0      ; Moving col copy i
                                                            terator
  263 00000154         ; Resize factor is in r1
  264 00000154 FB02 F201       MUL              R2, R2, R1  ; R2 = resize_facto
                                                            r * row_copy_iter
  265 00000158 441A            ADD              R2, R2, R3  ; R2 = resize_facto
                                                            r * row_copy_iter +
                                                             col_copy_iter
  266 0000015A F85D 1C08       LDR              R1, [SP, #-0x08] ; Loading targ
                                                            et image base addre
                                                            ss
  267 0000015E 4411            ADD              R1, R1, R2  ; R1 = row + col + 
                                                            resize_factor * row
                                                            _copy_iter + col_co
                                                            py_iter
  268 00000160         ; Address of the target byte is in R1
  269 00000160 F85D 2C04       LDR              R2, [SP, #-0x04] ; Loading base
                                                             image base address
                                                             - base_image[0][0]
                                                            
  270 00000164         ; We should copy image[row][column]
  271 00000164         ; image[row*col_max + column]
  272 00000164         ; address = base + row*col_max + column
  273 00000164 F81D 3C0D       LDRB             R3, [SP, #-0x0D] ; Loading row 
                                                            iterator
  274 00000168 F81D 4C0E       LDRB             R4, [SP, #-0x0E] ; Loading colu
                                                            mn iterator
  275 0000016C F81D 5C0A       LDRB             R5, [SP, #-0x0A] 
                                                            ; Loading col_max
  276 00000170 FB03 F305       MUL              R3, R3, R5  ; R3 = row*col_max
  277 00000174 4423            ADD              R3, R3, R4  ; R3 = row*col_max 
                                                            + column
  278 00000176 441A            ADD              R2, R2, R3  ; R2 = base_image_a
                                                            ddress + row*col_ma
                                                            x + column
  279 00000178 7810            LDRB             R0, [R2]    ; Loading byte to b
                                                            e copied
  280 0000017A 7008            STRB             R0, [R1]    ; Storing copied by
                                                            te
  281 0000017C         
  282 0000017C         ; Incrementing col_copy_iter
  283 0000017C F81D 0C10       LDRB             R0, [SP, #-0x10]
  284 00000180 F100 0001       ADD              R0, #1
  285 00000184 F80D 0C10       STRB             R0, [SP, #-0x10]
  286 00000188 E7D4            B                CopyForColumn
  287 0000018A         
  288 0000018A         ; @TODO: Finish skip bytes function
  289 0000018A         SkipBytes
  290 0000018A E001            B                EEnd
  291 0000018C E7AC            B                ForColumn
  292 0000018E         
  293 0000018E         
  294 0000018E         
  295 0000018E         
  296 0000018E         
  297 0000018E         
  298 0000018E         



ARM Macro Assembler    Page 8 


  299 0000018E         
  300 0000018E         
  301 0000018E         
  302 0000018E         
  303 0000018E         
  304 0000018E         
  305 0000018E         
  306 0000018E E7FF            B                EEnd
  307 00000190         
  308 00000190         
  309 00000190         
  310 00000190         
  311 00000190         ;Old 
  312 00000190         ;  ; Computing number of bytes that needs to be copied
  313 00000190         ;  LDR R9, =IMAGE_WIDTH
  314 00000190         ;  LDRB R9, [R9]
  315 00000190         ;  LDR R10, =IMAGE_HEIGHT
  316 00000190         ;  LDRB R10, [R10]
  317 00000190         ;  MUL R10, R10, R9
  318 00000190         ;  MUL R9, R5, R5   ; Resize factor ^ 2
  319 00000190         ;  MUL R4, R10, R9   ; Computing how many bytes in total
                        will be copied
  320 00000190         ;  LDR R9, =DISPLAY_WIDTH
  321 00000190         ;  LDRB R9, [R9]
  322 00000190         ;  LDR R10, =DISPLAY_HEIGHT
  323 00000190         ;  LDRB R10, [R10]
  324 00000190         ;  MUL R9, R9, R10  ; Computing how many bytes are there
                        in the display
  325 00000190         ;  CMP R9, R4
  326 00000190         ;  IT LE
  327 00000190         ;   MOVLE R4, R9  ; If less, sets as the maximum for the
                        display
  328 00000190         ;  MOV R3, #0    ; Total of bytes already copied
  329 00000190         ;  MUL R8, R5, R5   ; Calculates how many bytes needs to
                        be copied if expanding
  330 00000190         
  331 00000190         ;CopyLoop
  332 00000190         ;  CMP R3, R4    ; Checking if already copied all the by
                       tes
  333 00000190         ;  BGE EEnd    ; Finisheds if so
  334 00000190         ;  MOV R9, #0
  335 00000190         ;  LDRB R0, [R1]   ; Gets byte from base image
  336 00000190         ;  CMP R6, R9    ; Checks if expanding
  337 00000190         ;  BNE Skip    ; If not, skip k bytes
  338 00000190         ;  ; Copy k bytes
  339 00000190         ;  MOV R7, #0    ; Initializes number of times the byte 
                       was copied
  340 00000190         ;CopyRepeatLoop
  341 00000190         ;  CMP R7, R8    ; Checks if copied k bytes
  342 00000190         ;  BEQ CopyRepeatEnd  ; Finishes with the current byte a
                       nd increment base image address
  343 00000190         ;  STRB R0, [R2]   ; Stores byte in destination image
  344 00000190         ;  ADD R7, #1    ; Increment the number of times the byt
                       e was copied
  345 00000190         ;  ADD R3, #1    ; Increment the number of total copied 
                       bytes
  346 00000190         ;  ADD R1, #1    ; Incrementing target image address
  347 00000190         ;  B CopyRepeatLoop
  348 00000190         ;CopyRepeatEnd



ARM Macro Assembler    Page 9 


  349 00000190         ;  ; Needs to be here, because we want to copy the same 
                       byte
  350 00000190         ;  ; k (R5) times, and increment base address just by 1
  351 00000190         ;  ADD R2, #1    ; Incrementing base image address
  352 00000190         ;  B CopyLoop
  353 00000190         ;Skip
  354 00000190         ;  STRB R0, [R2]
  355 00000190         ;  ADD R2, R2, R5   ; Adding k to the address (skipping 
                       k bytes)
  356 00000190         ;  ADD R3, R3, #1   ; Incrementing total of bytes copied
                       
  357 00000190         ;  B CopyLoop
  358 00000190         
  359 00000190         EEnd
  360 00000190 BC01            POP{R0}
  361 00000192 4685            MOV              SP, R0
  362 00000194 F85D EB04       POP{LR}
  363 00000198 4770            BX               LR
  364 0000019A         
  365 0000019A         
  366 0000019A 00 00           ALIGN
  367 0000019C                 END
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\flash\image.d -o.\flash\image.o -I.\RTE\_TM4C129_Flash -IC:\U
sers\mathe\AppData\Local\Arm\Packs\ARM\CMSIS\5.6.0\CMSIS\Core\Include -IC:\User
s\mathe\AppData\Local\Arm\Packs\ARM\CMSIS\5.6.0\CMSIS\RTOS\RTX\INC -IC:\Users\m
athe\AppData\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 --prede
fine="__RTX SETA 1" --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION 
SETA 528" --predefine="_RTE_ SETA 1" --predefine="TM4C1294NCPDT SETA 1" --list=
.\flash\image.lst image.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 3 in file image.s
   Uses
      None
Comment: .text unused
CopyForColumn 00000134

Symbol: CopyForColumn
   Definitions
      At line 246 in file image.s
   Uses
      At line 286 in file image.s
Comment: CopyForColumn used once
CopyForColumnCont 0000014E

Symbol: CopyForColumnCont
   Definitions
      At line 259 in file image.s
   Uses
      At line 251 in file image.s
Comment: CopyForColumnCont used once
CopyForColumnEnd 00000140

Symbol: CopyForColumnEnd
   Definitions
      At line 253 in file image.s
   Uses
      None
Comment: CopyForColumnEnd unused
CopyForRow 00000112

Symbol: CopyForRow
   Definitions
      At line 229 in file image.s
   Uses
      At line 257 in file image.s
Comment: CopyForRow used once
CopyForRowCont 0000012C

Symbol: CopyForRowCont
   Definitions
      At line 241 in file image.s
   Uses
      At line 233 in file image.s
Comment: CopyForRowCont used once
CopyForRowEnd 0000011E

Symbol: CopyForRowEnd
   Definitions
      At line 235 in file image.s
   Uses
      None
Comment: CopyForRowEnd unused
EEnd 00000190

Symbol: EEnd



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 359 in file image.s
   Uses
      At line 208 in file image.s
      At line 290 in file image.s
      At line 306 in file image.s

ForColumn 000000E8

Symbol: ForColumn
   Definitions
      At line 210 in file image.s
   Uses
      At line 239 in file image.s
      At line 291 in file image.s

ForColumnCont 00000102

Symbol: ForColumnCont
   Definitions
      At line 220 in file image.s
   Uses
      At line 214 in file image.s
Comment: ForColumnCont used once
ForColumnEnd 000000F4

Symbol: ForColumnEnd
   Definitions
      At line 215 in file image.s
   Uses
      None
Comment: ForColumnEnd unused
ForRow 000000DC

Symbol: ForRow
   Definitions
      At line 203 in file image.s
   Uses
      At line 219 in file image.s
Comment: ForRow used once
SkipBytes 0000018A

Symbol: SkipBytes
   Definitions
      At line 289 in file image.s
   Uses
      At line 223 in file image.s
Comment: SkipBytes used once
resizeImage 00000000

Symbol: resizeImage
   Definitions
      At line 89 in file image.s
   Uses
      At line 15 in file image.s
Comment: resizeImage used once
14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

DISPLAY_HEIGHT 00000000

Symbol: DISPLAY_HEIGHT
   Definitions
      At line 9 in file image.s
   Uses
      None
Comment: DISPLAY_HEIGHT unused
DISPLAY_WIDTH 00000000

Symbol: DISPLAY_WIDTH
   Definitions
      At line 8 in file image.s
   Uses
      None
Comment: DISPLAY_WIDTH unused
IMAGE_HEIGHT 00000000

Symbol: IMAGE_HEIGHT
   Definitions
      At line 7 in file image.s
   Uses
      None
Comment: IMAGE_HEIGHT unused
IMAGE_WIDTH 00000000

Symbol: IMAGE_WIDTH
   Definitions
      At line 6 in file image.s
   Uses
      None
Comment: IMAGE_WIDTH unused
current_image 00000000

Symbol: current_image
   Definitions
      At line 12 in file image.s
   Uses
      At line 101 in file image.s
Comment: current_image used once
current_state 00000000

Symbol: current_state
   Definitions
      At line 13 in file image.s
   Uses
      At line 115 in file image.s
Comment: current_state used once
image 00000000

Symbol: image
   Definitions
      At line 11 in file image.s
   Uses
      At line 108 in file image.s
      At line 188 in file image.s
      At line 192 in file image.s

images 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


Symbol: images
   Definitions
      At line 10 in file image.s
   Uses
      At line 100 in file image.s
Comment: images used once
8 symbols
360 symbols in table
