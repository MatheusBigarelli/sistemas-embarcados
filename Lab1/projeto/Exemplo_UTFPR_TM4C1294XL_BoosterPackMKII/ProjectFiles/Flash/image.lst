


ARM Macro Assembler    Page 1 


    1 00000000                 THUMB
    2 00000000         
    3 00000000                 AREA             |.text|, READONLY, CODE, ALIGN=
2
    4 00000000         
    5 00000000         
    6 00000000                 IMPORT           IMAGE_WIDTH
    7 00000000                 IMPORT           IMAGE_HEIGTH
    8 00000000                 IMPORT           DISPLAY_WIDTH
    9 00000000                 IMPORT           DISPLAY_HEIGTH
   10 00000000                 IMPORT           images
   11 00000000                 IMPORT           image       ; The current image
                                                             being displayed
   12 00000000                 IMPORT           current_image ; Index of the cu
                                                            rrent image being d
                                                            isplayed
   13 00000000                 IMPORT           current_state
   14 00000000         
   15 00000000                 EXPORT           resizeImage
   16 00000000         
   17 00000000         
   18 00000000         ; Function to resize the current image acording to the i
                       mage state
   19 00000000         ;
   20 00000000         ; Possible states:
   21 00000000         ;  0     1     2    3    4   5  6  7  8   9  10
   22 00000000         ; 1/32  1/16  1/8  1/4  1/2  1  2  4  8  16  32
   23 00000000         ;
   24 00000000         ; This function will take the bytes of the image in memo
                       ry and copy
   25 00000000         ; them to another region with the ratio based on the sta
                       tes
   26 00000000         ;
   27 00000000         ; Variables:
   28 00000000         ; - R0: Current byte being copied
   29 00000000         ; - R1: Address of the current byte being copied from ba
                       se image (offset in memory - iterator)
   30 00000000         ; - R2: Address of the current image that will be filled
                       
   31 00000000         ; - R3: Number of total bytes copied
   32 00000000         ; - R4: Number of total bytes that need to be copied
   33 00000000         ; - R5: Resize factor
   34 00000000         ; - R6: Reduction flag
   35 00000000         ; - R7: Number of times that one byte (R1) was copied
   36 00000000         ; - R8: Number of times one byte needs to be copied (k^2
                        - R5^2)
   37 00000000         ;  *  cannot become **
   38 00000000         ;   needs to be **
   39 00000000         ;      **
   40 00000000         ;   to keep things squared
   41 00000000         ;
   42 00000000         ; If the number of bytes we should copy is less than the
                        default,
   43 00000000         ; we will skip some bytes accordingly
   44 00000000         ;
   45 00000000         resizeImage
   46 00000000 B500            PUSH{LR}
   47 00000002         
   48 00000002 4954            LDR              R1, =images ; Loading base imag



ARM Macro Assembler    Page 2 


                                                            es array address
   49 00000004 4854            LDR              R0, =current_image ; Loading ad
                                                            dress of index from
                                                             current image in i
                                                            mages array
   50 00000006 7800            LDRB             R0, [R0]    ; Loading index fro
                                                            m current image
   51 00000008 4401            ADD              R1, R1, R0  ; Calculating base 
                                                            image address
   52 0000000A 6809            LDR              R1, [R1]    ; Loading base imag
                                                            e address
   53 0000000C 4A53            LDR              R2, =image  ; Loading base addr
                                                            ess that will be fi
                                                            lled with the image
                                                            
   54 0000000E F102 0202       ADD              R2, R2, #2  ; Adding offset fro
                                                            m 2 bytes (uint8_t 
                                                            width, heigth)
   55 00000012         
   56 00000012         
   57 00000012         
   58 00000012         ; Computes the number of times one byte will be copied t
                       o the image
   59 00000012 4853            LDR              R0, =current_state
   60 00000014 7800            LDRB             R0, [R0]
   61 00000016 F04F 0900       MOV              R9, #0
   62 0000001A 4548            CMP              R0, R9
   63 0000001C BF04            ITT              EQ
   64 0000001E 2520            MOVEQ            R5, #32     ; Resize factor is 
                                                            32
   65 00000020 2601            MOVEQ            R6, #01     ; Image is shrinkin
                                                            g
   66 00000022         
   67 00000022 F04F 0901       MOV              R9, #1
   68 00000026 4548            CMP              R0, R9
   69 00000028 BF04            ITT              EQ
   70 0000002A 2510            MOVEQ            R5, #16     ; Resize factor is 
                                                            16
   71 0000002C 2601            MOVEQ            R6, #01     ; Image is shrinkin
                                                            g
   72 0000002E         
   73 0000002E F04F 0902       MOV              R9, #2
   74 00000032 4548            CMP              R0, R9
   75 00000034 BF04            ITT              EQ
   76 00000036 2508            MOVEQ            R5, #08     ; Resize factor is 
                                                            08
   77 00000038 2601            MOVEQ            R6, #01     ; Image is shrinkin
                                                            g
   78 0000003A         
   79 0000003A F04F 0903       MOV              R9, #3
   80 0000003E 4548            CMP              R0, R9
   81 00000040 BF04            ITT              EQ
   82 00000042 2504            MOVEQ            R5, #04     ; Resize factor is 
                                                            04
   83 00000044 2601            MOVEQ            R6, #01     ; Image is shrinkin
                                                            g
   84 00000046         
   85 00000046 F04F 0904       MOV              R9, #4
   86 0000004A 4548            CMP              R0, R9



ARM Macro Assembler    Page 3 


   87 0000004C BF04            ITT              EQ
   88 0000004E 2502            MOVEQ            R5, #02     ; Resize factor is 
                                                            02
   89 00000050 2601            MOVEQ            R6, #01     ; Image is shrinkin
                                                            g
   90 00000052         
   91 00000052 F04F 0905       MOV              R9, #5
   92 00000056 4548            CMP              R0, R9
   93 00000058 BF04            ITT              EQ
   94 0000005A 2501            MOVEQ            R5, #01     ; Resize factor is 
                                                            01
   95 0000005C 2600            MOVEQ            R6, #00     ; Image is "expandi
                                                            ng" (1B will be cop
                                                            ied)
   96 0000005E         
   97 0000005E         
   98 0000005E F04F 0906       MOV              R9, #6
   99 00000062 4548            CMP              R0, R9
  100 00000064 BF04            ITT              EQ
  101 00000066 2502            MOVEQ            R5, #02     ; Resize factor is 
                                                            02
  102 00000068 2600            MOVEQ            R6, #00     ; Image is expandin
                                                            g
  103 0000006A         
  104 0000006A F04F 0907       MOV              R9, #7
  105 0000006E 4548            CMP              R0, R9
  106 00000070 BF04            ITT              EQ
  107 00000072 2504            MOVEQ            R5, #04     ; Resize factor is 
                                                            04
  108 00000074 2600            MOVEQ            R6, #00     ; Image is expandin
                                                            g
  109 00000076         
  110 00000076 F04F 0908       MOV              R9, #8
  111 0000007A 4548            CMP              R0, R9
  112 0000007C BF04            ITT              EQ
  113 0000007E 2508            MOVEQ            R5, #08     ; Resize factor is 
                                                            08
  114 00000080 2600            MOVEQ            R6, #00     ; Image is expandin
                                                            g
  115 00000082         
  116 00000082 F04F 0909       MOV              R9, #9
  117 00000086 4548            CMP              R0, R9
  118 00000088 BF04            ITT              EQ
  119 0000008A 2510            MOVEQ            R5, #16     ; Resize factor is 
                                                            16
  120 0000008C 2600            MOVEQ            R6, #00     ; Image is expandin
                                                            g
  121 0000008E         
  122 0000008E F04F 090A       MOV              R9, #10
  123 00000092 4548            CMP              R0, R9
  124 00000094 BF04            ITT              EQ
  125 00000096 2520            MOVEQ            R5, #32     ; Resize factor is 
                                                            32
  126 00000098 2600            MOVEQ            R6, #00     ; Image is expandin
                                                            g
  127 0000009A         
  128 0000009A         
  129 0000009A         
  130 0000009A         ; Computing number of bytes that needs to be copied



ARM Macro Assembler    Page 4 


  131 0000009A F8DF 90C8       LDR              R9, =IMAGE_WIDTH
  132 0000009E F899 9000       LDRB             R9, [R9]
  133 000000A2 F8DF A0C4       LDR              R10, =IMAGE_HEIGTH
  134 000000A6 F89A A000       LDRB             R10, [R10]
  135 000000AA FB0A FA09       MUL              R10, R10, R9
  136 000000AE FB05 F905       MUL              R9, R5, R5  ; Resize factor ^ 2
                                                            
  137 000000B2 FB0A F409       MUL              R4, R10, R9 ; Computing how man
                                                            y bytes in total wi
                                                            ll be copied
  138 000000B6 F8DF 90B4       LDR              R9, =DISPLAY_WIDTH
  139 000000BA F899 9000       LDRB             R9, [R9]
  140 000000BE F8DF A0B0       LDR              R10, =DISPLAY_HEIGTH
  141 000000C2 F89A A000       LDRB             R10, [R10]
  142 000000C6 FB09 F90A       MUL              R9, R9, R10 ; Computing how man
                                                            y bytes are there i
                                                            n the display
  143 000000CA 45A1            CMP              R9, R4
  144 000000CC BFD8            IT               LE
  145 000000CE 464C            MOVLE            R4, R9      ; If less, sets as 
                                                            the maximum for the
                                                             display
  146 000000D0 F04F 0300       MOV              R3, #0      ; Total of bytes al
                                                            ready copied
  147 000000D4 FB05 F805       MUL              R8, R5, R5  ; Calculates how ma
                                                            ny bytes needs to b
                                                            e copied if expandi
                                                            ng
  148 000000D8         
  149 000000D8         CopyLoop
  150 000000D8 42A3            CMP              R3, R4      ; Checking if alrea
                                                            dy copied all the b
                                                            ytes
  151 000000DA DA18            BGE              EEnd        ; Finisheds if so
  152 000000DC F04F 0900       MOV              R9, #0
  153 000000E0 7808            LDRB             R0, [R1]    ; Gets byte from ba
                                                            se image
  154 000000E2 454E            CMP              R6, R9      ; Checks if expandi
                                                            ng
  155 000000E4 D10E            BNE              Skip        ; If not, skip k by
                                                            tes
  156 000000E6         ; Copy k bytes
  157 000000E6 F04F 0700       MOV              R7, #0      ; Initializes numbe
                                                            r of times the byte
                                                             was copied
  158 000000EA         CopyRepeatLoop
  159 000000EA 4547            CMP              R7, R8      ; Checks if copied 
                                                            k bytes
  160 000000EC D007            BEQ              CopyRepeatEnd ; Finishes with t
                                                            he current byte and
                                                             increment base ima
                                                            ge address
  161 000000EE 7010            STRB             R0, [R2]    ; Stores byte in de
                                                            stination image
  162 000000F0 F107 0701       ADD              R7, #1      ; Increment the num
                                                            ber of times the by
                                                            te was copied
  163 000000F4 F103 0301       ADD              R3, #1      ; Increment the num
                                                            ber of total copied



ARM Macro Assembler    Page 5 


                                                             bytes
  164 000000F8 F101 0101       ADD              R1, #1      ; Incrementing targ
                                                            et image address
  165 000000FC E7F5            B                CopyRepeatLoop
  166 000000FE         CopyRepeatEnd
  167 000000FE         ; Needs to be here, because we want to copy the same byt
                       e
  168 000000FE         ; k (R5) times, and increment base address just by 1
  169 000000FE F102 0201       ADD              R2, #1      ; Incrementing base
                                                             image address
  170 00000102 E7E9            B                CopyLoop
  171 00000104         Skip
  172 00000104 7010            STRB             R0, [R2]
  173 00000106 442A            ADD              R2, R2, R5  ; Adding k to the a
                                                            ddress (skipping k 
                                                            bytes)
  174 00000108 F103 0301       ADD              R3, R3, #1  ; Incrementing tota
                                                            l of bytes copied
  175 0000010C E7E4            B                CopyLoop
  176 0000010E         
  177 0000010E         EEnd
  178 0000010E         
  179 0000010E F85D EB04       POP{LR}
  180 00000112 4770            BX               LR
  181 00000114         
  182 00000114         ; Function to compute the next byte that should be copie
                       d
  183 00000114         ; If image is being enlarged by a factor of 2, the byte 
                       is copied 2 times
  184 00000114         ; If image is being reduced by a factor of 2, we should 
                       skip 1 byte (copy one
  185 00000114         ; ignore one)
  186 00000114         ; And so on
  187 00000114         ;
  188 00000114         ; Input:
  189 00000114         ; - R3: Number of times the byte was already copied
  190 00000114         ; - R4: Number of times the byte should be copied
  191 00000114         ;
  192 00000114         ; Variables:
  193 00000114         ; We cannot mess with the registers being used in the ot
                       her function,
  194 00000114         ; so we'll use the ones above R7
  195 00000114         ; - R8: Current state of the image (used to see which of
                        the actions to take
  196 00000114         ;
  197 00000114         GetNextByte
  198 00000114 F8DF 8048       LDR              R8, =current_state
  199 00000118 F1B8 0F00       CMP              R8, #0
  200 0000011C BF08            IT               EQ
  201 0000011E 3120            ADDEQ            R1, R1, #32 ; Skips 32 bytes an
                                                            d continue copying
  202 00000120         
  203 00000120 F1B8 0F01       CMP              R8, #1
  204 00000124 BF08            IT               EQ
  205 00000126 3110            ADDEQ            R1, R1, #16 ; Skips 32 bytes an
                                                            d continue copying
  206 00000128         
  207 00000128 F1B8 0F02       CMP              R8, #2
  208 0000012C BF08            IT               EQ



ARM Macro Assembler    Page 6 


  209 0000012E 3108            ADDEQ            R1, R1, #8  ; Skips 32 bytes an
                                                            d continue copying
  210 00000130         
  211 00000130 F1B8 0F03       CMP              R8, #3
  212 00000134 BF08            IT               EQ
  213 00000136 1D09            ADDEQ            R1, R1, #4  ; Skips 32 bytes an
                                                            d continue copying
  214 00000138         
  215 00000138 F1B8 0F04       CMP              R8, #4
  216 0000013C BF08            IT               EQ
  217 0000013E 1C89            ADDEQ            R1, R1, #2  ; Skips 32 bytes an
                                                            d continue copying
  218 00000140         
  219 00000140         ; Now it gets more complicated
  220 00000140         ; If the image is getting bigger
  221 00000140         ; we need to make sure the byte is copied more X times
  222 00000140         ; We can use this code segment to everyone
  223 00000140 42A3            CMP              R3, R4      ; Checks if the byt
                                                            e was copied the ri
                                                            ght
  224 00000142         ; ammount of times
  225 00000142 D103            BNE              CopyEnd     ; Skips if not
  226 00000144 BF08 1C49       ADDEQ            R1, R1, #1  ; Increments the by
                                                            te address
  227 00000148 F04F 0300       MOV              R3, #0      ; Restarts the numb
                                                            er of times the byt
                                                            e was copied
  228 0000014C         
  229 0000014C         
  230 0000014C         CopyEnd
  231 0000014C BF08 6808       LDREQ            R0, [R1]    ; Loads next byte t
                                                            o be copied in R0
  232 00000150 4770            BX               LR
  233 00000152         
  234 00000152         
  235 00000152 00 00           ALIGN
  236 00000154                 END
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\flash\image.d -o.\flash\image.o -I.\RTE\_TM4C129_Flash -IC:\U
sers\mathe\AppData\Local\Arm\Packs\ARM\CMSIS\5.6.0\CMSIS\Core\Include -IC:\User
s\mathe\AppData\Local\Arm\Packs\ARM\CMSIS\5.6.0\CMSIS\RTOS\RTX\INC -IC:\Users\m
athe\AppData\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 --prede
fine="__RTX SETA 1" --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION 
SETA 528" --predefine="_RTE_ SETA 1" --predefine="TM4C1294NCPDT SETA 1" --list=
.\flash\image.lst image.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 3 in file image.s
   Uses
      None
Comment: .text unused
CopyEnd 0000014C

Symbol: CopyEnd
   Definitions
      At line 230 in file image.s
   Uses
      At line 225 in file image.s
Comment: CopyEnd used once
CopyLoop 000000D8

Symbol: CopyLoop
   Definitions
      At line 149 in file image.s
   Uses
      At line 170 in file image.s
      At line 175 in file image.s

CopyRepeatEnd 000000FE

Symbol: CopyRepeatEnd
   Definitions
      At line 166 in file image.s
   Uses
      At line 160 in file image.s
Comment: CopyRepeatEnd used once
CopyRepeatLoop 000000EA

Symbol: CopyRepeatLoop
   Definitions
      At line 158 in file image.s
   Uses
      At line 165 in file image.s
Comment: CopyRepeatLoop used once
EEnd 0000010E

Symbol: EEnd
   Definitions
      At line 177 in file image.s
   Uses
      At line 151 in file image.s
Comment: EEnd used once
GetNextByte 00000114

Symbol: GetNextByte
   Definitions
      At line 197 in file image.s
   Uses
      None
Comment: GetNextByte unused
Skip 00000104




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: Skip
   Definitions
      At line 171 in file image.s
   Uses
      At line 155 in file image.s
Comment: Skip used once
resizeImage 00000000

Symbol: resizeImage
   Definitions
      At line 45 in file image.s
   Uses
      At line 15 in file image.s
Comment: resizeImage used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

DISPLAY_HEIGTH 00000000

Symbol: DISPLAY_HEIGTH
   Definitions
      At line 9 in file image.s
   Uses
      At line 140 in file image.s
Comment: DISPLAY_HEIGTH used once
DISPLAY_WIDTH 00000000

Symbol: DISPLAY_WIDTH
   Definitions
      At line 8 in file image.s
   Uses
      At line 138 in file image.s
Comment: DISPLAY_WIDTH used once
IMAGE_HEIGTH 00000000

Symbol: IMAGE_HEIGTH
   Definitions
      At line 7 in file image.s
   Uses
      At line 133 in file image.s
Comment: IMAGE_HEIGTH used once
IMAGE_WIDTH 00000000

Symbol: IMAGE_WIDTH
   Definitions
      At line 6 in file image.s
   Uses
      At line 131 in file image.s
Comment: IMAGE_WIDTH used once
current_image 00000000

Symbol: current_image
   Definitions
      At line 12 in file image.s
   Uses
      At line 49 in file image.s
Comment: current_image used once
current_state 00000000

Symbol: current_state
   Definitions
      At line 13 in file image.s
   Uses
      At line 59 in file image.s
      At line 198 in file image.s

image 00000000

Symbol: image
   Definitions
      At line 11 in file image.s
   Uses
      At line 53 in file image.s
Comment: image used once
images 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: images
   Definitions
      At line 10 in file image.s
   Uses
      At line 48 in file image.s
Comment: images used once
8 symbols
355 symbols in table
